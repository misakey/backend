// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// WebauthnCredential is an object representing the database table.
type WebauthnCredential struct {
	ID              string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name            string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	IdentityID      string    `boil:"identity_id" json:"identity_id" toml:"identity_id" yaml:"identity_id"`
	PublicKey       []byte    `boil:"public_key" json:"public_key" toml:"public_key" yaml:"public_key"`
	AttestationType string    `boil:"attestation_type" json:"attestation_type" toml:"attestation_type" yaml:"attestation_type"`
	Aaguid          []byte    `boil:"aaguid" json:"aaguid" toml:"aaguid" yaml:"aaguid"`
	SignCount       int       `boil:"sign_count" json:"sign_count" toml:"sign_count" yaml:"sign_count"`
	CloneWarning    bool      `boil:"clone_warning" json:"clone_warning" toml:"clone_warning" yaml:"clone_warning"`
	CreatedAt       time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *webauthnCredentialR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L webauthnCredentialL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WebauthnCredentialColumns = struct {
	ID              string
	Name            string
	IdentityID      string
	PublicKey       string
	AttestationType string
	Aaguid          string
	SignCount       string
	CloneWarning    string
	CreatedAt       string
}{
	ID:              "id",
	Name:            "name",
	IdentityID:      "identity_id",
	PublicKey:       "public_key",
	AttestationType: "attestation_type",
	Aaguid:          "aaguid",
	SignCount:       "sign_count",
	CloneWarning:    "clone_warning",
	CreatedAt:       "created_at",
}

// Generated where

type whereHelper__byte struct{ field string }

func (w whereHelper__byte) EQ(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelper__byte) NEQ(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelper__byte) LT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelper__byte) LTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelper__byte) GT(x []byte) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelper__byte) GTE(x []byte) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var WebauthnCredentialWhere = struct {
	ID              whereHelperstring
	Name            whereHelperstring
	IdentityID      whereHelperstring
	PublicKey       whereHelper__byte
	AttestationType whereHelperstring
	Aaguid          whereHelper__byte
	SignCount       whereHelperint
	CloneWarning    whereHelperbool
	CreatedAt       whereHelpertime_Time
}{
	ID:              whereHelperstring{field: "\"webauthn_credential\".\"id\""},
	Name:            whereHelperstring{field: "\"webauthn_credential\".\"name\""},
	IdentityID:      whereHelperstring{field: "\"webauthn_credential\".\"identity_id\""},
	PublicKey:       whereHelper__byte{field: "\"webauthn_credential\".\"public_key\""},
	AttestationType: whereHelperstring{field: "\"webauthn_credential\".\"attestation_type\""},
	Aaguid:          whereHelper__byte{field: "\"webauthn_credential\".\"aaguid\""},
	SignCount:       whereHelperint{field: "\"webauthn_credential\".\"sign_count\""},
	CloneWarning:    whereHelperbool{field: "\"webauthn_credential\".\"clone_warning\""},
	CreatedAt:       whereHelpertime_Time{field: "\"webauthn_credential\".\"created_at\""},
}

// WebauthnCredentialRels is where relationship names are stored.
var WebauthnCredentialRels = struct {
	Identity string
}{
	Identity: "Identity",
}

// webauthnCredentialR is where relationships are stored.
type webauthnCredentialR struct {
	Identity *Identity `boil:"Identity" json:"Identity" toml:"Identity" yaml:"Identity"`
}

// NewStruct creates a new relationship struct
func (*webauthnCredentialR) NewStruct() *webauthnCredentialR {
	return &webauthnCredentialR{}
}

// webauthnCredentialL is where Load methods for each relationship are stored.
type webauthnCredentialL struct{}

var (
	webauthnCredentialAllColumns            = []string{"id", "name", "identity_id", "public_key", "attestation_type", "aaguid", "sign_count", "clone_warning", "created_at"}
	webauthnCredentialColumnsWithoutDefault = []string{"id", "name", "identity_id", "public_key", "attestation_type", "aaguid", "sign_count", "clone_warning", "created_at"}
	webauthnCredentialColumnsWithDefault    = []string{}
	webauthnCredentialPrimaryKeyColumns     = []string{"id"}
)

type (
	// WebauthnCredentialSlice is an alias for a slice of pointers to WebauthnCredential.
	// This should generally be used opposed to []WebauthnCredential.
	WebauthnCredentialSlice []*WebauthnCredential

	webauthnCredentialQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	webauthnCredentialType                 = reflect.TypeOf(&WebauthnCredential{})
	webauthnCredentialMapping              = queries.MakeStructMapping(webauthnCredentialType)
	webauthnCredentialPrimaryKeyMapping, _ = queries.BindMapping(webauthnCredentialType, webauthnCredentialMapping, webauthnCredentialPrimaryKeyColumns)
	webauthnCredentialInsertCacheMut       sync.RWMutex
	webauthnCredentialInsertCache          = make(map[string]insertCache)
	webauthnCredentialUpdateCacheMut       sync.RWMutex
	webauthnCredentialUpdateCache          = make(map[string]updateCache)
	webauthnCredentialUpsertCacheMut       sync.RWMutex
	webauthnCredentialUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single webauthnCredential record from the query.
func (q webauthnCredentialQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WebauthnCredential, error) {
	o := &WebauthnCredential{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for webauthn_credential")
	}

	return o, nil
}

// All returns all WebauthnCredential records from the query.
func (q webauthnCredentialQuery) All(ctx context.Context, exec boil.ContextExecutor) (WebauthnCredentialSlice, error) {
	var o []*WebauthnCredential

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to WebauthnCredential slice")
	}

	return o, nil
}

// Count returns the count of all WebauthnCredential records in the query.
func (q webauthnCredentialQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count webauthn_credential rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q webauthnCredentialQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if webauthn_credential exists")
	}

	return count > 0, nil
}

// Identity pointed to by the foreign key.
func (o *WebauthnCredential) Identity(mods ...qm.QueryMod) identityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IdentityID),
	}

	queryMods = append(queryMods, mods...)

	query := Identities(queryMods...)
	queries.SetFrom(query.Query, "\"identity\"")

	return query
}

// LoadIdentity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (webauthnCredentialL) LoadIdentity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeWebauthnCredential interface{}, mods queries.Applicator) error {
	var slice []*WebauthnCredential
	var object *WebauthnCredential

	if singular {
		object = maybeWebauthnCredential.(*WebauthnCredential)
	} else {
		slice = *maybeWebauthnCredential.(*[]*WebauthnCredential)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &webauthnCredentialR{}
		}
		args = append(args, object.IdentityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &webauthnCredentialR{}
			}

			for _, a := range args {
				if a == obj.IdentityID {
					continue Outer
				}
			}

			args = append(args, obj.IdentityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`identity`),
		qm.WhereIn(`identity.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Identity")
	}

	var resultSlice []*Identity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Identity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for identity")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for identity")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Identity = foreign
		if foreign.R == nil {
			foreign.R = &identityR{}
		}
		foreign.R.WebauthnCredentials = append(foreign.R.WebauthnCredentials, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IdentityID == foreign.ID {
				local.R.Identity = foreign
				if foreign.R == nil {
					foreign.R = &identityR{}
				}
				foreign.R.WebauthnCredentials = append(foreign.R.WebauthnCredentials, local)
				break
			}
		}
	}

	return nil
}

// SetIdentity of the webauthnCredential to the related item.
// Sets o.R.Identity to related.
// Adds o to related.R.WebauthnCredentials.
func (o *WebauthnCredential) SetIdentity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Identity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"webauthn_credential\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"identity_id"}),
		strmangle.WhereClause("\"", "\"", 2, webauthnCredentialPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IdentityID = related.ID
	if o.R == nil {
		o.R = &webauthnCredentialR{
			Identity: related,
		}
	} else {
		o.R.Identity = related
	}

	if related.R == nil {
		related.R = &identityR{
			WebauthnCredentials: WebauthnCredentialSlice{o},
		}
	} else {
		related.R.WebauthnCredentials = append(related.R.WebauthnCredentials, o)
	}

	return nil
}

// WebauthnCredentials retrieves all the records using an executor.
func WebauthnCredentials(mods ...qm.QueryMod) webauthnCredentialQuery {
	mods = append(mods, qm.From("\"webauthn_credential\""))
	return webauthnCredentialQuery{NewQuery(mods...)}
}

// FindWebauthnCredential retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWebauthnCredential(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*WebauthnCredential, error) {
	webauthnCredentialObj := &WebauthnCredential{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"webauthn_credential\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, webauthnCredentialObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from webauthn_credential")
	}

	return webauthnCredentialObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WebauthnCredential) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no webauthn_credential provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(webauthnCredentialColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	webauthnCredentialInsertCacheMut.RLock()
	cache, cached := webauthnCredentialInsertCache[key]
	webauthnCredentialInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			webauthnCredentialAllColumns,
			webauthnCredentialColumnsWithDefault,
			webauthnCredentialColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(webauthnCredentialType, webauthnCredentialMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(webauthnCredentialType, webauthnCredentialMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"webauthn_credential\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"webauthn_credential\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into webauthn_credential")
	}

	if !cached {
		webauthnCredentialInsertCacheMut.Lock()
		webauthnCredentialInsertCache[key] = cache
		webauthnCredentialInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the WebauthnCredential.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WebauthnCredential) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	webauthnCredentialUpdateCacheMut.RLock()
	cache, cached := webauthnCredentialUpdateCache[key]
	webauthnCredentialUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			webauthnCredentialAllColumns,
			webauthnCredentialPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update webauthn_credential, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"webauthn_credential\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, webauthnCredentialPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(webauthnCredentialType, webauthnCredentialMapping, append(wl, webauthnCredentialPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update webauthn_credential row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for webauthn_credential")
	}

	if !cached {
		webauthnCredentialUpdateCacheMut.Lock()
		webauthnCredentialUpdateCache[key] = cache
		webauthnCredentialUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q webauthnCredentialQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for webauthn_credential")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for webauthn_credential")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WebauthnCredentialSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), webauthnCredentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"webauthn_credential\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, webauthnCredentialPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in webauthnCredential slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all webauthnCredential")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WebauthnCredential) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no webauthn_credential provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(webauthnCredentialColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	webauthnCredentialUpsertCacheMut.RLock()
	cache, cached := webauthnCredentialUpsertCache[key]
	webauthnCredentialUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			webauthnCredentialAllColumns,
			webauthnCredentialColumnsWithDefault,
			webauthnCredentialColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			webauthnCredentialAllColumns,
			webauthnCredentialPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert webauthn_credential, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(webauthnCredentialPrimaryKeyColumns))
			copy(conflict, webauthnCredentialPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"webauthn_credential\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(webauthnCredentialType, webauthnCredentialMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(webauthnCredentialType, webauthnCredentialMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert webauthn_credential")
	}

	if !cached {
		webauthnCredentialUpsertCacheMut.Lock()
		webauthnCredentialUpsertCache[key] = cache
		webauthnCredentialUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single WebauthnCredential record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WebauthnCredential) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no WebauthnCredential provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), webauthnCredentialPrimaryKeyMapping)
	sql := "DELETE FROM \"webauthn_credential\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from webauthn_credential")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for webauthn_credential")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q webauthnCredentialQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no webauthnCredentialQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from webauthn_credential")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for webauthn_credential")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WebauthnCredentialSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), webauthnCredentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"webauthn_credential\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, webauthnCredentialPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from webauthnCredential slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for webauthn_credential")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WebauthnCredential) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWebauthnCredential(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WebauthnCredentialSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WebauthnCredentialSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), webauthnCredentialPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"webauthn_credential\".* FROM \"webauthn_credential\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, webauthnCredentialPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in WebauthnCredentialSlice")
	}

	*o = slice

	return nil
}

// WebauthnCredentialExists checks if the WebauthnCredential row exists.
func WebauthnCredentialExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"webauthn_credential\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if webauthn_credential exists")
	}

	return exists, nil
}
