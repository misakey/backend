// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsedCoupon is an object representing the database table.
type UsedCoupon struct {
	ID         int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	IdentityID string    `boil:"identity_id" json:"identity_id" toml:"identity_id" yaml:"identity_id"`
	Value      string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	CreatedAt  time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *usedCouponR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usedCouponL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsedCouponColumns = struct {
	ID         string
	IdentityID string
	Value      string
	CreatedAt  string
}{
	ID:         "id",
	IdentityID: "identity_id",
	Value:      "value",
	CreatedAt:  "created_at",
}

// Generated where

var UsedCouponWhere = struct {
	ID         whereHelperint
	IdentityID whereHelperstring
	Value      whereHelperstring
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperint{field: "\"used_coupon\".\"id\""},
	IdentityID: whereHelperstring{field: "\"used_coupon\".\"identity_id\""},
	Value:      whereHelperstring{field: "\"used_coupon\".\"value\""},
	CreatedAt:  whereHelpertime_Time{field: "\"used_coupon\".\"created_at\""},
}

// UsedCouponRels is where relationship names are stored.
var UsedCouponRels = struct {
	Identity string
}{
	Identity: "Identity",
}

// usedCouponR is where relationships are stored.
type usedCouponR struct {
	Identity *Identity `boil:"Identity" json:"Identity" toml:"Identity" yaml:"Identity"`
}

// NewStruct creates a new relationship struct
func (*usedCouponR) NewStruct() *usedCouponR {
	return &usedCouponR{}
}

// usedCouponL is where Load methods for each relationship are stored.
type usedCouponL struct{}

var (
	usedCouponAllColumns            = []string{"id", "identity_id", "value", "created_at"}
	usedCouponColumnsWithoutDefault = []string{"identity_id", "value"}
	usedCouponColumnsWithDefault    = []string{"id", "created_at"}
	usedCouponPrimaryKeyColumns     = []string{"id"}
)

type (
	// UsedCouponSlice is an alias for a slice of pointers to UsedCoupon.
	// This should generally be used opposed to []UsedCoupon.
	UsedCouponSlice []*UsedCoupon

	usedCouponQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usedCouponType                 = reflect.TypeOf(&UsedCoupon{})
	usedCouponMapping              = queries.MakeStructMapping(usedCouponType)
	usedCouponPrimaryKeyMapping, _ = queries.BindMapping(usedCouponType, usedCouponMapping, usedCouponPrimaryKeyColumns)
	usedCouponInsertCacheMut       sync.RWMutex
	usedCouponInsertCache          = make(map[string]insertCache)
	usedCouponUpdateCacheMut       sync.RWMutex
	usedCouponUpdateCache          = make(map[string]updateCache)
	usedCouponUpsertCacheMut       sync.RWMutex
	usedCouponUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single usedCoupon record from the query.
func (q usedCouponQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsedCoupon, error) {
	o := &UsedCoupon{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for used_coupon")
	}

	return o, nil
}

// All returns all UsedCoupon records from the query.
func (q usedCouponQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsedCouponSlice, error) {
	var o []*UsedCoupon

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to UsedCoupon slice")
	}

	return o, nil
}

// Count returns the count of all UsedCoupon records in the query.
func (q usedCouponQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count used_coupon rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usedCouponQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if used_coupon exists")
	}

	return count > 0, nil
}

// Identity pointed to by the foreign key.
func (o *UsedCoupon) Identity(mods ...qm.QueryMod) identityQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IdentityID),
	}

	queryMods = append(queryMods, mods...)

	query := Identities(queryMods...)
	queries.SetFrom(query.Query, "\"identity\"")

	return query
}

// LoadIdentity allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (usedCouponL) LoadIdentity(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUsedCoupon interface{}, mods queries.Applicator) error {
	var slice []*UsedCoupon
	var object *UsedCoupon

	if singular {
		object = maybeUsedCoupon.(*UsedCoupon)
	} else {
		slice = *maybeUsedCoupon.(*[]*UsedCoupon)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &usedCouponR{}
		}
		args = append(args, object.IdentityID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &usedCouponR{}
			}

			for _, a := range args {
				if a == obj.IdentityID {
					continue Outer
				}
			}

			args = append(args, obj.IdentityID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`identity`),
		qm.WhereIn(`identity.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Identity")
	}

	var resultSlice []*Identity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Identity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for identity")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for identity")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Identity = foreign
		if foreign.R == nil {
			foreign.R = &identityR{}
		}
		foreign.R.UsedCoupons = append(foreign.R.UsedCoupons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IdentityID == foreign.ID {
				local.R.Identity = foreign
				if foreign.R == nil {
					foreign.R = &identityR{}
				}
				foreign.R.UsedCoupons = append(foreign.R.UsedCoupons, local)
				break
			}
		}
	}

	return nil
}

// SetIdentity of the usedCoupon to the related item.
// Sets o.R.Identity to related.
// Adds o to related.R.UsedCoupons.
func (o *UsedCoupon) SetIdentity(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Identity) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"used_coupon\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"identity_id"}),
		strmangle.WhereClause("\"", "\"", 2, usedCouponPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IdentityID = related.ID
	if o.R == nil {
		o.R = &usedCouponR{
			Identity: related,
		}
	} else {
		o.R.Identity = related
	}

	if related.R == nil {
		related.R = &identityR{
			UsedCoupons: UsedCouponSlice{o},
		}
	} else {
		related.R.UsedCoupons = append(related.R.UsedCoupons, o)
	}

	return nil
}

// UsedCoupons retrieves all the records using an executor.
func UsedCoupons(mods ...qm.QueryMod) usedCouponQuery {
	mods = append(mods, qm.From("\"used_coupon\""))
	return usedCouponQuery{NewQuery(mods...)}
}

// FindUsedCoupon retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsedCoupon(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*UsedCoupon, error) {
	usedCouponObj := &UsedCoupon{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"used_coupon\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, usedCouponObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from used_coupon")
	}

	return usedCouponObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsedCoupon) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no used_coupon provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(usedCouponColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usedCouponInsertCacheMut.RLock()
	cache, cached := usedCouponInsertCache[key]
	usedCouponInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usedCouponAllColumns,
			usedCouponColumnsWithDefault,
			usedCouponColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usedCouponType, usedCouponMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usedCouponType, usedCouponMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"used_coupon\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"used_coupon\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into used_coupon")
	}

	if !cached {
		usedCouponInsertCacheMut.Lock()
		usedCouponInsertCache[key] = cache
		usedCouponInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UsedCoupon.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsedCoupon) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	usedCouponUpdateCacheMut.RLock()
	cache, cached := usedCouponUpdateCache[key]
	usedCouponUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usedCouponAllColumns,
			usedCouponPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update used_coupon, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"used_coupon\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usedCouponPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usedCouponType, usedCouponMapping, append(wl, usedCouponPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update used_coupon row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for used_coupon")
	}

	if !cached {
		usedCouponUpdateCacheMut.Lock()
		usedCouponUpdateCache[key] = cache
		usedCouponUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q usedCouponQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for used_coupon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for used_coupon")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsedCouponSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usedCouponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"used_coupon\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usedCouponPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in usedCoupon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all usedCoupon")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsedCoupon) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no used_coupon provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(usedCouponColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usedCouponUpsertCacheMut.RLock()
	cache, cached := usedCouponUpsertCache[key]
	usedCouponUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usedCouponAllColumns,
			usedCouponColumnsWithDefault,
			usedCouponColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			usedCouponAllColumns,
			usedCouponPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert used_coupon, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usedCouponPrimaryKeyColumns))
			copy(conflict, usedCouponPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"used_coupon\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usedCouponType, usedCouponMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usedCouponType, usedCouponMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert used_coupon")
	}

	if !cached {
		usedCouponUpsertCacheMut.Lock()
		usedCouponUpsertCache[key] = cache
		usedCouponUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UsedCoupon record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsedCoupon) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no UsedCoupon provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usedCouponPrimaryKeyMapping)
	sql := "DELETE FROM \"used_coupon\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from used_coupon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for used_coupon")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usedCouponQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no usedCouponQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from used_coupon")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for used_coupon")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsedCouponSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usedCouponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"used_coupon\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usedCouponPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from usedCoupon slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for used_coupon")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsedCoupon) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsedCoupon(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsedCouponSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsedCouponSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usedCouponPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"used_coupon\".* FROM \"used_coupon\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usedCouponPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in UsedCouponSlice")
	}

	*o = slice

	return nil
}

// UsedCouponExists checks if the UsedCoupon row exists.
func UsedCouponExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"used_coupon\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if used_coupon exists")
	}

	return exists, nil
}
