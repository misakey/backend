// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Identifier is an object representing the database table.
type Identifier struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Kind      string    `boil:"kind" json:"kind" toml:"kind" yaml:"kind"`
	Value     string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *identifierR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L identifierL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IdentifierColumns = struct {
	ID        string
	Kind      string
	Value     string
	CreatedAt string
}{
	ID:        "id",
	Kind:      "kind",
	Value:     "value",
	CreatedAt: "created_at",
}

// Generated where

var IdentifierWhere = struct {
	ID        whereHelperstring
	Kind      whereHelperstring
	Value     whereHelperstring
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"identifier\".\"id\""},
	Kind:      whereHelperstring{field: "\"identifier\".\"kind\""},
	Value:     whereHelperstring{field: "\"identifier\".\"value\""},
	CreatedAt: whereHelpertime_Time{field: "\"identifier\".\"created_at\""},
}

// IdentifierRels is where relationship names are stored.
var IdentifierRels = struct {
	Identities string
}{
	Identities: "Identities",
}

// identifierR is where relationships are stored.
type identifierR struct {
	Identities IdentitySlice `boil:"Identities" json:"Identities" toml:"Identities" yaml:"Identities"`
}

// NewStruct creates a new relationship struct
func (*identifierR) NewStruct() *identifierR {
	return &identifierR{}
}

// identifierL is where Load methods for each relationship are stored.
type identifierL struct{}

var (
	identifierAllColumns            = []string{"id", "kind", "value", "created_at"}
	identifierColumnsWithoutDefault = []string{"id", "kind", "value"}
	identifierColumnsWithDefault    = []string{"created_at"}
	identifierPrimaryKeyColumns     = []string{"id"}
)

type (
	// IdentifierSlice is an alias for a slice of pointers to Identifier.
	// This should generally be used opposed to []Identifier.
	IdentifierSlice []*Identifier

	identifierQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	identifierType                 = reflect.TypeOf(&Identifier{})
	identifierMapping              = queries.MakeStructMapping(identifierType)
	identifierPrimaryKeyMapping, _ = queries.BindMapping(identifierType, identifierMapping, identifierPrimaryKeyColumns)
	identifierInsertCacheMut       sync.RWMutex
	identifierInsertCache          = make(map[string]insertCache)
	identifierUpdateCacheMut       sync.RWMutex
	identifierUpdateCache          = make(map[string]updateCache)
	identifierUpsertCacheMut       sync.RWMutex
	identifierUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single identifier record from the query.
func (q identifierQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Identifier, error) {
	o := &Identifier{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for identifier")
	}

	return o, nil
}

// All returns all Identifier records from the query.
func (q identifierQuery) All(ctx context.Context, exec boil.ContextExecutor) (IdentifierSlice, error) {
	var o []*Identifier

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Identifier slice")
	}

	return o, nil
}

// Count returns the count of all Identifier records in the query.
func (q identifierQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count identifier rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q identifierQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if identifier exists")
	}

	return count > 0, nil
}

// Identities retrieves all the identity's Identities with an executor.
func (o *Identifier) Identities(mods ...qm.QueryMod) identityQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"identity\".\"identifier_id\"=?", o.ID),
	)

	query := Identities(queryMods...)
	queries.SetFrom(query.Query, "\"identity\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"identity\".*"})
	}

	return query
}

// LoadIdentities allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (identifierL) LoadIdentities(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIdentifier interface{}, mods queries.Applicator) error {
	var slice []*Identifier
	var object *Identifier

	if singular {
		object = maybeIdentifier.(*Identifier)
	} else {
		slice = *maybeIdentifier.(*[]*Identifier)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &identifierR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &identifierR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`identity`),
		qm.WhereIn(`identity.identifier_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load identity")
	}

	var resultSlice []*Identity
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice identity")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on identity")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for identity")
	}

	if singular {
		object.R.Identities = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &identityR{}
			}
			foreign.R.Identifier = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IdentifierID {
				local.R.Identities = append(local.R.Identities, foreign)
				if foreign.R == nil {
					foreign.R = &identityR{}
				}
				foreign.R.Identifier = local
				break
			}
		}
	}

	return nil
}

// AddIdentities adds the given related objects to the existing relationships
// of the identifier, optionally inserting them as new records.
// Appends related to o.R.Identities.
// Sets related.R.Identifier appropriately.
func (o *Identifier) AddIdentities(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Identity) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IdentifierID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"identity\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"identifier_id"}),
				strmangle.WhereClause("\"", "\"", 2, identityPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IdentifierID = o.ID
		}
	}

	if o.R == nil {
		o.R = &identifierR{
			Identities: related,
		}
	} else {
		o.R.Identities = append(o.R.Identities, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &identityR{
				Identifier: o,
			}
		} else {
			rel.R.Identifier = o
		}
	}
	return nil
}

// Identifiers retrieves all the records using an executor.
func Identifiers(mods ...qm.QueryMod) identifierQuery {
	mods = append(mods, qm.From("\"identifier\""))
	return identifierQuery{NewQuery(mods...)}
}

// FindIdentifier retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIdentifier(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Identifier, error) {
	identifierObj := &Identifier{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"identifier\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, identifierObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from identifier")
	}

	return identifierObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Identifier) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no identifier provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(identifierColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	identifierInsertCacheMut.RLock()
	cache, cached := identifierInsertCache[key]
	identifierInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			identifierAllColumns,
			identifierColumnsWithDefault,
			identifierColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(identifierType, identifierMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(identifierType, identifierMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"identifier\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"identifier\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into identifier")
	}

	if !cached {
		identifierInsertCacheMut.Lock()
		identifierInsertCache[key] = cache
		identifierInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Identifier.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Identifier) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	identifierUpdateCacheMut.RLock()
	cache, cached := identifierUpdateCache[key]
	identifierUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			identifierAllColumns,
			identifierPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update identifier, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"identifier\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, identifierPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(identifierType, identifierMapping, append(wl, identifierPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update identifier row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for identifier")
	}

	if !cached {
		identifierUpdateCacheMut.Lock()
		identifierUpdateCache[key] = cache
		identifierUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q identifierQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for identifier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for identifier")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IdentifierSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), identifierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"identifier\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, identifierPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in identifier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all identifier")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Identifier) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no identifier provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(identifierColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	identifierUpsertCacheMut.RLock()
	cache, cached := identifierUpsertCache[key]
	identifierUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			identifierAllColumns,
			identifierColumnsWithDefault,
			identifierColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			identifierAllColumns,
			identifierPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert identifier, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(identifierPrimaryKeyColumns))
			copy(conflict, identifierPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"identifier\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(identifierType, identifierMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(identifierType, identifierMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert identifier")
	}

	if !cached {
		identifierUpsertCacheMut.Lock()
		identifierUpsertCache[key] = cache
		identifierUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Identifier record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Identifier) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Identifier provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), identifierPrimaryKeyMapping)
	sql := "DELETE FROM \"identifier\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from identifier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for identifier")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q identifierQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no identifierQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from identifier")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for identifier")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IdentifierSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), identifierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"identifier\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, identifierPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from identifier slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for identifier")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Identifier) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIdentifier(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IdentifierSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IdentifierSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), identifierPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"identifier\".* FROM \"identifier\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, identifierPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in IdentifierSlice")
	}

	*o = slice

	return nil
}

// IdentifierExists checks if the Identifier row exists.
func IdentifierExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"identifier\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if identifier exists")
	}

	return exists, nil
}
