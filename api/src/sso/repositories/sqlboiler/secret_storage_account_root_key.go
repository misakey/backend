// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SecretStorageAccountRootKey is an object representing the database table.
type SecretStorageAccountRootKey struct {
	KeyHash      string    `boil:"key_hash" json:"key_hash" toml:"key_hash" yaml:"key_hash"`
	AccountID    string    `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	EncryptedKey string    `boil:"encrypted_key" json:"encrypted_key" toml:"encrypted_key" yaml:"encrypted_key"`
	CreatedAt    time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *secretStorageAccountRootKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L secretStorageAccountRootKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SecretStorageAccountRootKeyColumns = struct {
	KeyHash      string
	AccountID    string
	EncryptedKey string
	CreatedAt    string
	UpdatedAt    string
}{
	KeyHash:      "key_hash",
	AccountID:    "account_id",
	EncryptedKey: "encrypted_key",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

// Generated where

var SecretStorageAccountRootKeyWhere = struct {
	KeyHash      whereHelperstring
	AccountID    whereHelperstring
	EncryptedKey whereHelperstring
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	KeyHash:      whereHelperstring{field: "\"secret_storage_account_root_key\".\"key_hash\""},
	AccountID:    whereHelperstring{field: "\"secret_storage_account_root_key\".\"account_id\""},
	EncryptedKey: whereHelperstring{field: "\"secret_storage_account_root_key\".\"encrypted_key\""},
	CreatedAt:    whereHelpertime_Time{field: "\"secret_storage_account_root_key\".\"created_at\""},
	UpdatedAt:    whereHelpertime_Time{field: "\"secret_storage_account_root_key\".\"updated_at\""},
}

// SecretStorageAccountRootKeyRels is where relationship names are stored.
var SecretStorageAccountRootKeyRels = struct {
	Account                                     string
	AccountRootKeyHashSecretStorageAsymKeys     string
	AccountRootKeyHashSecretStorageBoxKeyShares string
	AccountRootKeyHashSecretStorageVaultKeys    string
}{
	Account:                                 "Account",
	AccountRootKeyHashSecretStorageAsymKeys: "AccountRootKeyHashSecretStorageAsymKeys",
	AccountRootKeyHashSecretStorageBoxKeyShares: "AccountRootKeyHashSecretStorageBoxKeyShares",
	AccountRootKeyHashSecretStorageVaultKeys:    "AccountRootKeyHashSecretStorageVaultKeys",
}

// secretStorageAccountRootKeyR is where relationships are stored.
type secretStorageAccountRootKeyR struct {
	Account                                     *Account                      `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	AccountRootKeyHashSecretStorageAsymKeys     SecretStorageAsymKeySlice     `boil:"AccountRootKeyHashSecretStorageAsymKeys" json:"AccountRootKeyHashSecretStorageAsymKeys" toml:"AccountRootKeyHashSecretStorageAsymKeys" yaml:"AccountRootKeyHashSecretStorageAsymKeys"`
	AccountRootKeyHashSecretStorageBoxKeyShares SecretStorageBoxKeyShareSlice `boil:"AccountRootKeyHashSecretStorageBoxKeyShares" json:"AccountRootKeyHashSecretStorageBoxKeyShares" toml:"AccountRootKeyHashSecretStorageBoxKeyShares" yaml:"AccountRootKeyHashSecretStorageBoxKeyShares"`
	AccountRootKeyHashSecretStorageVaultKeys    SecretStorageVaultKeySlice    `boil:"AccountRootKeyHashSecretStorageVaultKeys" json:"AccountRootKeyHashSecretStorageVaultKeys" toml:"AccountRootKeyHashSecretStorageVaultKeys" yaml:"AccountRootKeyHashSecretStorageVaultKeys"`
}

// NewStruct creates a new relationship struct
func (*secretStorageAccountRootKeyR) NewStruct() *secretStorageAccountRootKeyR {
	return &secretStorageAccountRootKeyR{}
}

// secretStorageAccountRootKeyL is where Load methods for each relationship are stored.
type secretStorageAccountRootKeyL struct{}

var (
	secretStorageAccountRootKeyAllColumns            = []string{"key_hash", "account_id", "encrypted_key", "created_at", "updated_at"}
	secretStorageAccountRootKeyColumnsWithoutDefault = []string{"key_hash", "account_id", "encrypted_key"}
	secretStorageAccountRootKeyColumnsWithDefault    = []string{"created_at", "updated_at"}
	secretStorageAccountRootKeyPrimaryKeyColumns     = []string{"key_hash"}
)

type (
	// SecretStorageAccountRootKeySlice is an alias for a slice of pointers to SecretStorageAccountRootKey.
	// This should generally be used opposed to []SecretStorageAccountRootKey.
	SecretStorageAccountRootKeySlice []*SecretStorageAccountRootKey

	secretStorageAccountRootKeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	secretStorageAccountRootKeyType                 = reflect.TypeOf(&SecretStorageAccountRootKey{})
	secretStorageAccountRootKeyMapping              = queries.MakeStructMapping(secretStorageAccountRootKeyType)
	secretStorageAccountRootKeyPrimaryKeyMapping, _ = queries.BindMapping(secretStorageAccountRootKeyType, secretStorageAccountRootKeyMapping, secretStorageAccountRootKeyPrimaryKeyColumns)
	secretStorageAccountRootKeyInsertCacheMut       sync.RWMutex
	secretStorageAccountRootKeyInsertCache          = make(map[string]insertCache)
	secretStorageAccountRootKeyUpdateCacheMut       sync.RWMutex
	secretStorageAccountRootKeyUpdateCache          = make(map[string]updateCache)
	secretStorageAccountRootKeyUpsertCacheMut       sync.RWMutex
	secretStorageAccountRootKeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single secretStorageAccountRootKey record from the query.
func (q secretStorageAccountRootKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SecretStorageAccountRootKey, error) {
	o := &SecretStorageAccountRootKey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for secret_storage_account_root_key")
	}

	return o, nil
}

// All returns all SecretStorageAccountRootKey records from the query.
func (q secretStorageAccountRootKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (SecretStorageAccountRootKeySlice, error) {
	var o []*SecretStorageAccountRootKey

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to SecretStorageAccountRootKey slice")
	}

	return o, nil
}

// Count returns the count of all SecretStorageAccountRootKey records in the query.
func (q secretStorageAccountRootKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count secret_storage_account_root_key rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q secretStorageAccountRootKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if secret_storage_account_root_key exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *SecretStorageAccountRootKey) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// AccountRootKeyHashSecretStorageAsymKeys retrieves all the secret_storage_asym_key's SecretStorageAsymKeys with an executor via account_root_key_hash column.
func (o *SecretStorageAccountRootKey) AccountRootKeyHashSecretStorageAsymKeys(mods ...qm.QueryMod) secretStorageAsymKeyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"secret_storage_asym_key\".\"account_root_key_hash\"=?", o.KeyHash),
	)

	query := SecretStorageAsymKeys(queryMods...)
	queries.SetFrom(query.Query, "\"secret_storage_asym_key\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"secret_storage_asym_key\".*"})
	}

	return query
}

// AccountRootKeyHashSecretStorageBoxKeyShares retrieves all the secret_storage_box_key_share's SecretStorageBoxKeyShares with an executor via account_root_key_hash column.
func (o *SecretStorageAccountRootKey) AccountRootKeyHashSecretStorageBoxKeyShares(mods ...qm.QueryMod) secretStorageBoxKeyShareQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"secret_storage_box_key_share\".\"account_root_key_hash\"=?", o.KeyHash),
	)

	query := SecretStorageBoxKeyShares(queryMods...)
	queries.SetFrom(query.Query, "\"secret_storage_box_key_share\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"secret_storage_box_key_share\".*"})
	}

	return query
}

// AccountRootKeyHashSecretStorageVaultKeys retrieves all the secret_storage_vault_key's SecretStorageVaultKeys with an executor via account_root_key_hash column.
func (o *SecretStorageAccountRootKey) AccountRootKeyHashSecretStorageVaultKeys(mods ...qm.QueryMod) secretStorageVaultKeyQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"secret_storage_vault_key\".\"account_root_key_hash\"=?", o.KeyHash),
	)

	query := SecretStorageVaultKeys(queryMods...)
	queries.SetFrom(query.Query, "\"secret_storage_vault_key\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"secret_storage_vault_key\".*"})
	}

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (secretStorageAccountRootKeyL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecretStorageAccountRootKey interface{}, mods queries.Applicator) error {
	var slice []*SecretStorageAccountRootKey
	var object *SecretStorageAccountRootKey

	if singular {
		object = maybeSecretStorageAccountRootKey.(*SecretStorageAccountRootKey)
	} else {
		slice = *maybeSecretStorageAccountRootKey.(*[]*SecretStorageAccountRootKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &secretStorageAccountRootKeyR{}
		}
		args = append(args, object.AccountID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &secretStorageAccountRootKeyR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.SecretStorageAccountRootKeys = append(foreign.R.SecretStorageAccountRootKeys, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.SecretStorageAccountRootKeys = append(foreign.R.SecretStorageAccountRootKeys, local)
				break
			}
		}
	}

	return nil
}

// LoadAccountRootKeyHashSecretStorageAsymKeys allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (secretStorageAccountRootKeyL) LoadAccountRootKeyHashSecretStorageAsymKeys(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecretStorageAccountRootKey interface{}, mods queries.Applicator) error {
	var slice []*SecretStorageAccountRootKey
	var object *SecretStorageAccountRootKey

	if singular {
		object = maybeSecretStorageAccountRootKey.(*SecretStorageAccountRootKey)
	} else {
		slice = *maybeSecretStorageAccountRootKey.(*[]*SecretStorageAccountRootKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &secretStorageAccountRootKeyR{}
		}
		args = append(args, object.KeyHash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &secretStorageAccountRootKeyR{}
			}

			for _, a := range args {
				if a == obj.KeyHash {
					continue Outer
				}
			}

			args = append(args, obj.KeyHash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`secret_storage_asym_key`),
		qm.WhereIn(`secret_storage_asym_key.account_root_key_hash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load secret_storage_asym_key")
	}

	var resultSlice []*SecretStorageAsymKey
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice secret_storage_asym_key")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on secret_storage_asym_key")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for secret_storage_asym_key")
	}

	if singular {
		object.R.AccountRootKeyHashSecretStorageAsymKeys = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &secretStorageAsymKeyR{}
			}
			foreign.R.AccountRootKeyHashSecretStorageAccountRootKey = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.KeyHash == foreign.AccountRootKeyHash {
				local.R.AccountRootKeyHashSecretStorageAsymKeys = append(local.R.AccountRootKeyHashSecretStorageAsymKeys, foreign)
				if foreign.R == nil {
					foreign.R = &secretStorageAsymKeyR{}
				}
				foreign.R.AccountRootKeyHashSecretStorageAccountRootKey = local
				break
			}
		}
	}

	return nil
}

// LoadAccountRootKeyHashSecretStorageBoxKeyShares allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (secretStorageAccountRootKeyL) LoadAccountRootKeyHashSecretStorageBoxKeyShares(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecretStorageAccountRootKey interface{}, mods queries.Applicator) error {
	var slice []*SecretStorageAccountRootKey
	var object *SecretStorageAccountRootKey

	if singular {
		object = maybeSecretStorageAccountRootKey.(*SecretStorageAccountRootKey)
	} else {
		slice = *maybeSecretStorageAccountRootKey.(*[]*SecretStorageAccountRootKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &secretStorageAccountRootKeyR{}
		}
		args = append(args, object.KeyHash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &secretStorageAccountRootKeyR{}
			}

			for _, a := range args {
				if a == obj.KeyHash {
					continue Outer
				}
			}

			args = append(args, obj.KeyHash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`secret_storage_box_key_share`),
		qm.WhereIn(`secret_storage_box_key_share.account_root_key_hash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load secret_storage_box_key_share")
	}

	var resultSlice []*SecretStorageBoxKeyShare
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice secret_storage_box_key_share")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on secret_storage_box_key_share")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for secret_storage_box_key_share")
	}

	if singular {
		object.R.AccountRootKeyHashSecretStorageBoxKeyShares = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &secretStorageBoxKeyShareR{}
			}
			foreign.R.AccountRootKeyHashSecretStorageAccountRootKey = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.KeyHash == foreign.AccountRootKeyHash {
				local.R.AccountRootKeyHashSecretStorageBoxKeyShares = append(local.R.AccountRootKeyHashSecretStorageBoxKeyShares, foreign)
				if foreign.R == nil {
					foreign.R = &secretStorageBoxKeyShareR{}
				}
				foreign.R.AccountRootKeyHashSecretStorageAccountRootKey = local
				break
			}
		}
	}

	return nil
}

// LoadAccountRootKeyHashSecretStorageVaultKeys allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (secretStorageAccountRootKeyL) LoadAccountRootKeyHashSecretStorageVaultKeys(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecretStorageAccountRootKey interface{}, mods queries.Applicator) error {
	var slice []*SecretStorageAccountRootKey
	var object *SecretStorageAccountRootKey

	if singular {
		object = maybeSecretStorageAccountRootKey.(*SecretStorageAccountRootKey)
	} else {
		slice = *maybeSecretStorageAccountRootKey.(*[]*SecretStorageAccountRootKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &secretStorageAccountRootKeyR{}
		}
		args = append(args, object.KeyHash)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &secretStorageAccountRootKeyR{}
			}

			for _, a := range args {
				if a == obj.KeyHash {
					continue Outer
				}
			}

			args = append(args, obj.KeyHash)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`secret_storage_vault_key`),
		qm.WhereIn(`secret_storage_vault_key.account_root_key_hash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load secret_storage_vault_key")
	}

	var resultSlice []*SecretStorageVaultKey
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice secret_storage_vault_key")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on secret_storage_vault_key")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for secret_storage_vault_key")
	}

	if singular {
		object.R.AccountRootKeyHashSecretStorageVaultKeys = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &secretStorageVaultKeyR{}
			}
			foreign.R.AccountRootKeyHashSecretStorageAccountRootKey = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.KeyHash == foreign.AccountRootKeyHash {
				local.R.AccountRootKeyHashSecretStorageVaultKeys = append(local.R.AccountRootKeyHashSecretStorageVaultKeys, foreign)
				if foreign.R == nil {
					foreign.R = &secretStorageVaultKeyR{}
				}
				foreign.R.AccountRootKeyHashSecretStorageAccountRootKey = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the secretStorageAccountRootKey to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.SecretStorageAccountRootKeys.
func (o *SecretStorageAccountRootKey) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"secret_storage_account_root_key\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, secretStorageAccountRootKeyPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.KeyHash}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &secretStorageAccountRootKeyR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			SecretStorageAccountRootKeys: SecretStorageAccountRootKeySlice{o},
		}
	} else {
		related.R.SecretStorageAccountRootKeys = append(related.R.SecretStorageAccountRootKeys, o)
	}

	return nil
}

// AddAccountRootKeyHashSecretStorageAsymKeys adds the given related objects to the existing relationships
// of the secret_storage_account_root_key, optionally inserting them as new records.
// Appends related to o.R.AccountRootKeyHashSecretStorageAsymKeys.
// Sets related.R.AccountRootKeyHashSecretStorageAccountRootKey appropriately.
func (o *SecretStorageAccountRootKey) AddAccountRootKeyHashSecretStorageAsymKeys(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SecretStorageAsymKey) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AccountRootKeyHash = o.KeyHash
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"secret_storage_asym_key\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"account_root_key_hash"}),
				strmangle.WhereClause("\"", "\"", 2, secretStorageAsymKeyPrimaryKeyColumns),
			)
			values := []interface{}{o.KeyHash, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AccountRootKeyHash = o.KeyHash
		}
	}

	if o.R == nil {
		o.R = &secretStorageAccountRootKeyR{
			AccountRootKeyHashSecretStorageAsymKeys: related,
		}
	} else {
		o.R.AccountRootKeyHashSecretStorageAsymKeys = append(o.R.AccountRootKeyHashSecretStorageAsymKeys, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &secretStorageAsymKeyR{
				AccountRootKeyHashSecretStorageAccountRootKey: o,
			}
		} else {
			rel.R.AccountRootKeyHashSecretStorageAccountRootKey = o
		}
	}
	return nil
}

// AddAccountRootKeyHashSecretStorageBoxKeyShares adds the given related objects to the existing relationships
// of the secret_storage_account_root_key, optionally inserting them as new records.
// Appends related to o.R.AccountRootKeyHashSecretStorageBoxKeyShares.
// Sets related.R.AccountRootKeyHashSecretStorageAccountRootKey appropriately.
func (o *SecretStorageAccountRootKey) AddAccountRootKeyHashSecretStorageBoxKeyShares(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SecretStorageBoxKeyShare) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AccountRootKeyHash = o.KeyHash
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"secret_storage_box_key_share\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"account_root_key_hash"}),
				strmangle.WhereClause("\"", "\"", 2, secretStorageBoxKeySharePrimaryKeyColumns),
			)
			values := []interface{}{o.KeyHash, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AccountRootKeyHash = o.KeyHash
		}
	}

	if o.R == nil {
		o.R = &secretStorageAccountRootKeyR{
			AccountRootKeyHashSecretStorageBoxKeyShares: related,
		}
	} else {
		o.R.AccountRootKeyHashSecretStorageBoxKeyShares = append(o.R.AccountRootKeyHashSecretStorageBoxKeyShares, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &secretStorageBoxKeyShareR{
				AccountRootKeyHashSecretStorageAccountRootKey: o,
			}
		} else {
			rel.R.AccountRootKeyHashSecretStorageAccountRootKey = o
		}
	}
	return nil
}

// AddAccountRootKeyHashSecretStorageVaultKeys adds the given related objects to the existing relationships
// of the secret_storage_account_root_key, optionally inserting them as new records.
// Appends related to o.R.AccountRootKeyHashSecretStorageVaultKeys.
// Sets related.R.AccountRootKeyHashSecretStorageAccountRootKey appropriately.
func (o *SecretStorageAccountRootKey) AddAccountRootKeyHashSecretStorageVaultKeys(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SecretStorageVaultKey) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.AccountRootKeyHash = o.KeyHash
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"secret_storage_vault_key\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"account_root_key_hash"}),
				strmangle.WhereClause("\"", "\"", 2, secretStorageVaultKeyPrimaryKeyColumns),
			)
			values := []interface{}{o.KeyHash, rel.KeyHash}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.AccountRootKeyHash = o.KeyHash
		}
	}

	if o.R == nil {
		o.R = &secretStorageAccountRootKeyR{
			AccountRootKeyHashSecretStorageVaultKeys: related,
		}
	} else {
		o.R.AccountRootKeyHashSecretStorageVaultKeys = append(o.R.AccountRootKeyHashSecretStorageVaultKeys, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &secretStorageVaultKeyR{
				AccountRootKeyHashSecretStorageAccountRootKey: o,
			}
		} else {
			rel.R.AccountRootKeyHashSecretStorageAccountRootKey = o
		}
	}
	return nil
}

// SecretStorageAccountRootKeys retrieves all the records using an executor.
func SecretStorageAccountRootKeys(mods ...qm.QueryMod) secretStorageAccountRootKeyQuery {
	mods = append(mods, qm.From("\"secret_storage_account_root_key\""))
	return secretStorageAccountRootKeyQuery{NewQuery(mods...)}
}

// FindSecretStorageAccountRootKey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSecretStorageAccountRootKey(ctx context.Context, exec boil.ContextExecutor, keyHash string, selectCols ...string) (*SecretStorageAccountRootKey, error) {
	secretStorageAccountRootKeyObj := &SecretStorageAccountRootKey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"secret_storage_account_root_key\" where \"key_hash\"=$1", sel,
	)

	q := queries.Raw(query, keyHash)

	err := q.Bind(ctx, exec, secretStorageAccountRootKeyObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from secret_storage_account_root_key")
	}

	return secretStorageAccountRootKeyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SecretStorageAccountRootKey) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no secret_storage_account_root_key provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(secretStorageAccountRootKeyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	secretStorageAccountRootKeyInsertCacheMut.RLock()
	cache, cached := secretStorageAccountRootKeyInsertCache[key]
	secretStorageAccountRootKeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			secretStorageAccountRootKeyAllColumns,
			secretStorageAccountRootKeyColumnsWithDefault,
			secretStorageAccountRootKeyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(secretStorageAccountRootKeyType, secretStorageAccountRootKeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(secretStorageAccountRootKeyType, secretStorageAccountRootKeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"secret_storage_account_root_key\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"secret_storage_account_root_key\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into secret_storage_account_root_key")
	}

	if !cached {
		secretStorageAccountRootKeyInsertCacheMut.Lock()
		secretStorageAccountRootKeyInsertCache[key] = cache
		secretStorageAccountRootKeyInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SecretStorageAccountRootKey.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SecretStorageAccountRootKey) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	secretStorageAccountRootKeyUpdateCacheMut.RLock()
	cache, cached := secretStorageAccountRootKeyUpdateCache[key]
	secretStorageAccountRootKeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			secretStorageAccountRootKeyAllColumns,
			secretStorageAccountRootKeyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update secret_storage_account_root_key, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"secret_storage_account_root_key\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, secretStorageAccountRootKeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(secretStorageAccountRootKeyType, secretStorageAccountRootKeyMapping, append(wl, secretStorageAccountRootKeyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update secret_storage_account_root_key row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for secret_storage_account_root_key")
	}

	if !cached {
		secretStorageAccountRootKeyUpdateCacheMut.Lock()
		secretStorageAccountRootKeyUpdateCache[key] = cache
		secretStorageAccountRootKeyUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q secretStorageAccountRootKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for secret_storage_account_root_key")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for secret_storage_account_root_key")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SecretStorageAccountRootKeySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), secretStorageAccountRootKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"secret_storage_account_root_key\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, secretStorageAccountRootKeyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in secretStorageAccountRootKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all secretStorageAccountRootKey")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SecretStorageAccountRootKey) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no secret_storage_account_root_key provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(secretStorageAccountRootKeyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	secretStorageAccountRootKeyUpsertCacheMut.RLock()
	cache, cached := secretStorageAccountRootKeyUpsertCache[key]
	secretStorageAccountRootKeyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			secretStorageAccountRootKeyAllColumns,
			secretStorageAccountRootKeyColumnsWithDefault,
			secretStorageAccountRootKeyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			secretStorageAccountRootKeyAllColumns,
			secretStorageAccountRootKeyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert secret_storage_account_root_key, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(secretStorageAccountRootKeyPrimaryKeyColumns))
			copy(conflict, secretStorageAccountRootKeyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"secret_storage_account_root_key\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(secretStorageAccountRootKeyType, secretStorageAccountRootKeyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(secretStorageAccountRootKeyType, secretStorageAccountRootKeyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert secret_storage_account_root_key")
	}

	if !cached {
		secretStorageAccountRootKeyUpsertCacheMut.Lock()
		secretStorageAccountRootKeyUpsertCache[key] = cache
		secretStorageAccountRootKeyUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SecretStorageAccountRootKey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SecretStorageAccountRootKey) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no SecretStorageAccountRootKey provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), secretStorageAccountRootKeyPrimaryKeyMapping)
	sql := "DELETE FROM \"secret_storage_account_root_key\" WHERE \"key_hash\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from secret_storage_account_root_key")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for secret_storage_account_root_key")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q secretStorageAccountRootKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no secretStorageAccountRootKeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from secret_storage_account_root_key")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for secret_storage_account_root_key")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SecretStorageAccountRootKeySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), secretStorageAccountRootKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"secret_storage_account_root_key\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, secretStorageAccountRootKeyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from secretStorageAccountRootKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for secret_storage_account_root_key")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SecretStorageAccountRootKey) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSecretStorageAccountRootKey(ctx, exec, o.KeyHash)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SecretStorageAccountRootKeySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SecretStorageAccountRootKeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), secretStorageAccountRootKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"secret_storage_account_root_key\".* FROM \"secret_storage_account_root_key\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, secretStorageAccountRootKeyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in SecretStorageAccountRootKeySlice")
	}

	*o = slice

	return nil
}

// SecretStorageAccountRootKeyExists checks if the SecretStorageAccountRootKey row exists.
func SecretStorageAccountRootKeyExists(ctx context.Context, exec boil.ContextExecutor, keyHash string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"secret_storage_account_root_key\" where \"key_hash\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, keyHash)
	}
	row := exec.QueryRowContext(ctx, sql, keyHash)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if secret_storage_account_root_key exists")
	}

	return exists, nil
}
