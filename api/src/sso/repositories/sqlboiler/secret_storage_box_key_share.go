// Code generated by SQLBoiler 4.4.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SecretStorageBoxKeyShare is an object representing the database table.
type SecretStorageBoxKeyShare struct {
	ID                       string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	InvitationShareHash      string    `boil:"invitation_share_hash" json:"invitation_share_hash" toml:"invitation_share_hash" yaml:"invitation_share_hash"`
	EncryptedInvitationShare string    `boil:"encrypted_invitation_share" json:"encrypted_invitation_share" toml:"encrypted_invitation_share" yaml:"encrypted_invitation_share"`
	BoxID                    string    `boil:"box_id" json:"box_id" toml:"box_id" yaml:"box_id"`
	AccountRootKeyHash       string    `boil:"account_root_key_hash" json:"account_root_key_hash" toml:"account_root_key_hash" yaml:"account_root_key_hash"`
	CreatedAt                time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt                time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *secretStorageBoxKeyShareR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L secretStorageBoxKeyShareL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SecretStorageBoxKeyShareColumns = struct {
	ID                       string
	InvitationShareHash      string
	EncryptedInvitationShare string
	BoxID                    string
	AccountRootKeyHash       string
	CreatedAt                string
	UpdatedAt                string
}{
	ID:                       "id",
	InvitationShareHash:      "invitation_share_hash",
	EncryptedInvitationShare: "encrypted_invitation_share",
	BoxID:                    "box_id",
	AccountRootKeyHash:       "account_root_key_hash",
	CreatedAt:                "created_at",
	UpdatedAt:                "updated_at",
}

// Generated where

var SecretStorageBoxKeyShareWhere = struct {
	ID                       whereHelperstring
	InvitationShareHash      whereHelperstring
	EncryptedInvitationShare whereHelperstring
	BoxID                    whereHelperstring
	AccountRootKeyHash       whereHelperstring
	CreatedAt                whereHelpertime_Time
	UpdatedAt                whereHelpertime_Time
}{
	ID:                       whereHelperstring{field: "\"secret_storage_box_key_share\".\"id\""},
	InvitationShareHash:      whereHelperstring{field: "\"secret_storage_box_key_share\".\"invitation_share_hash\""},
	EncryptedInvitationShare: whereHelperstring{field: "\"secret_storage_box_key_share\".\"encrypted_invitation_share\""},
	BoxID:                    whereHelperstring{field: "\"secret_storage_box_key_share\".\"box_id\""},
	AccountRootKeyHash:       whereHelperstring{field: "\"secret_storage_box_key_share\".\"account_root_key_hash\""},
	CreatedAt:                whereHelpertime_Time{field: "\"secret_storage_box_key_share\".\"created_at\""},
	UpdatedAt:                whereHelpertime_Time{field: "\"secret_storage_box_key_share\".\"updated_at\""},
}

// SecretStorageBoxKeyShareRels is where relationship names are stored.
var SecretStorageBoxKeyShareRels = struct {
	AccountRootKeyHashSecretStorageAccountRootKey string
}{
	AccountRootKeyHashSecretStorageAccountRootKey: "AccountRootKeyHashSecretStorageAccountRootKey",
}

// secretStorageBoxKeyShareR is where relationships are stored.
type secretStorageBoxKeyShareR struct {
	AccountRootKeyHashSecretStorageAccountRootKey *SecretStorageAccountRootKey `boil:"AccountRootKeyHashSecretStorageAccountRootKey" json:"AccountRootKeyHashSecretStorageAccountRootKey" toml:"AccountRootKeyHashSecretStorageAccountRootKey" yaml:"AccountRootKeyHashSecretStorageAccountRootKey"`
}

// NewStruct creates a new relationship struct
func (*secretStorageBoxKeyShareR) NewStruct() *secretStorageBoxKeyShareR {
	return &secretStorageBoxKeyShareR{}
}

// secretStorageBoxKeyShareL is where Load methods for each relationship are stored.
type secretStorageBoxKeyShareL struct{}

var (
	secretStorageBoxKeyShareAllColumns            = []string{"id", "invitation_share_hash", "encrypted_invitation_share", "box_id", "account_root_key_hash", "created_at", "updated_at"}
	secretStorageBoxKeyShareColumnsWithoutDefault = []string{"id", "invitation_share_hash", "encrypted_invitation_share", "box_id", "account_root_key_hash"}
	secretStorageBoxKeyShareColumnsWithDefault    = []string{"created_at", "updated_at"}
	secretStorageBoxKeySharePrimaryKeyColumns     = []string{"id"}
)

type (
	// SecretStorageBoxKeyShareSlice is an alias for a slice of pointers to SecretStorageBoxKeyShare.
	// This should generally be used opposed to []SecretStorageBoxKeyShare.
	SecretStorageBoxKeyShareSlice []*SecretStorageBoxKeyShare

	secretStorageBoxKeyShareQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	secretStorageBoxKeyShareType                 = reflect.TypeOf(&SecretStorageBoxKeyShare{})
	secretStorageBoxKeyShareMapping              = queries.MakeStructMapping(secretStorageBoxKeyShareType)
	secretStorageBoxKeySharePrimaryKeyMapping, _ = queries.BindMapping(secretStorageBoxKeyShareType, secretStorageBoxKeyShareMapping, secretStorageBoxKeySharePrimaryKeyColumns)
	secretStorageBoxKeyShareInsertCacheMut       sync.RWMutex
	secretStorageBoxKeyShareInsertCache          = make(map[string]insertCache)
	secretStorageBoxKeyShareUpdateCacheMut       sync.RWMutex
	secretStorageBoxKeyShareUpdateCache          = make(map[string]updateCache)
	secretStorageBoxKeyShareUpsertCacheMut       sync.RWMutex
	secretStorageBoxKeyShareUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single secretStorageBoxKeyShare record from the query.
func (q secretStorageBoxKeyShareQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SecretStorageBoxKeyShare, error) {
	o := &SecretStorageBoxKeyShare{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for secret_storage_box_key_share")
	}

	return o, nil
}

// All returns all SecretStorageBoxKeyShare records from the query.
func (q secretStorageBoxKeyShareQuery) All(ctx context.Context, exec boil.ContextExecutor) (SecretStorageBoxKeyShareSlice, error) {
	var o []*SecretStorageBoxKeyShare

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to SecretStorageBoxKeyShare slice")
	}

	return o, nil
}

// Count returns the count of all SecretStorageBoxKeyShare records in the query.
func (q secretStorageBoxKeyShareQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count secret_storage_box_key_share rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q secretStorageBoxKeyShareQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if secret_storage_box_key_share exists")
	}

	return count > 0, nil
}

// AccountRootKeyHashSecretStorageAccountRootKey pointed to by the foreign key.
func (o *SecretStorageBoxKeyShare) AccountRootKeyHashSecretStorageAccountRootKey(mods ...qm.QueryMod) secretStorageAccountRootKeyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"key_hash\" = ?", o.AccountRootKeyHash),
	}

	queryMods = append(queryMods, mods...)

	query := SecretStorageAccountRootKeys(queryMods...)
	queries.SetFrom(query.Query, "\"secret_storage_account_root_key\"")

	return query
}

// LoadAccountRootKeyHashSecretStorageAccountRootKey allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (secretStorageBoxKeyShareL) LoadAccountRootKeyHashSecretStorageAccountRootKey(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSecretStorageBoxKeyShare interface{}, mods queries.Applicator) error {
	var slice []*SecretStorageBoxKeyShare
	var object *SecretStorageBoxKeyShare

	if singular {
		object = maybeSecretStorageBoxKeyShare.(*SecretStorageBoxKeyShare)
	} else {
		slice = *maybeSecretStorageBoxKeyShare.(*[]*SecretStorageBoxKeyShare)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &secretStorageBoxKeyShareR{}
		}
		args = append(args, object.AccountRootKeyHash)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &secretStorageBoxKeyShareR{}
			}

			for _, a := range args {
				if a == obj.AccountRootKeyHash {
					continue Outer
				}
			}

			args = append(args, obj.AccountRootKeyHash)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`secret_storage_account_root_key`),
		qm.WhereIn(`secret_storage_account_root_key.key_hash in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SecretStorageAccountRootKey")
	}

	var resultSlice []*SecretStorageAccountRootKey
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SecretStorageAccountRootKey")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for secret_storage_account_root_key")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for secret_storage_account_root_key")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.AccountRootKeyHashSecretStorageAccountRootKey = foreign
		if foreign.R == nil {
			foreign.R = &secretStorageAccountRootKeyR{}
		}
		foreign.R.AccountRootKeyHashSecretStorageBoxKeyShares = append(foreign.R.AccountRootKeyHashSecretStorageBoxKeyShares, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountRootKeyHash == foreign.KeyHash {
				local.R.AccountRootKeyHashSecretStorageAccountRootKey = foreign
				if foreign.R == nil {
					foreign.R = &secretStorageAccountRootKeyR{}
				}
				foreign.R.AccountRootKeyHashSecretStorageBoxKeyShares = append(foreign.R.AccountRootKeyHashSecretStorageBoxKeyShares, local)
				break
			}
		}
	}

	return nil
}

// SetAccountRootKeyHashSecretStorageAccountRootKey of the secretStorageBoxKeyShare to the related item.
// Sets o.R.AccountRootKeyHashSecretStorageAccountRootKey to related.
// Adds o to related.R.AccountRootKeyHashSecretStorageBoxKeyShares.
func (o *SecretStorageBoxKeyShare) SetAccountRootKeyHashSecretStorageAccountRootKey(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SecretStorageAccountRootKey) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"secret_storage_box_key_share\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_root_key_hash"}),
		strmangle.WhereClause("\"", "\"", 2, secretStorageBoxKeySharePrimaryKeyColumns),
	)
	values := []interface{}{related.KeyHash, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountRootKeyHash = related.KeyHash
	if o.R == nil {
		o.R = &secretStorageBoxKeyShareR{
			AccountRootKeyHashSecretStorageAccountRootKey: related,
		}
	} else {
		o.R.AccountRootKeyHashSecretStorageAccountRootKey = related
	}

	if related.R == nil {
		related.R = &secretStorageAccountRootKeyR{
			AccountRootKeyHashSecretStorageBoxKeyShares: SecretStorageBoxKeyShareSlice{o},
		}
	} else {
		related.R.AccountRootKeyHashSecretStorageBoxKeyShares = append(related.R.AccountRootKeyHashSecretStorageBoxKeyShares, o)
	}

	return nil
}

// SecretStorageBoxKeyShares retrieves all the records using an executor.
func SecretStorageBoxKeyShares(mods ...qm.QueryMod) secretStorageBoxKeyShareQuery {
	mods = append(mods, qm.From("\"secret_storage_box_key_share\""))
	return secretStorageBoxKeyShareQuery{NewQuery(mods...)}
}

// FindSecretStorageBoxKeyShare retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSecretStorageBoxKeyShare(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*SecretStorageBoxKeyShare, error) {
	secretStorageBoxKeyShareObj := &SecretStorageBoxKeyShare{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"secret_storage_box_key_share\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, secretStorageBoxKeyShareObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from secret_storage_box_key_share")
	}

	return secretStorageBoxKeyShareObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SecretStorageBoxKeyShare) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no secret_storage_box_key_share provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(secretStorageBoxKeyShareColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	secretStorageBoxKeyShareInsertCacheMut.RLock()
	cache, cached := secretStorageBoxKeyShareInsertCache[key]
	secretStorageBoxKeyShareInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			secretStorageBoxKeyShareAllColumns,
			secretStorageBoxKeyShareColumnsWithDefault,
			secretStorageBoxKeyShareColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(secretStorageBoxKeyShareType, secretStorageBoxKeyShareMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(secretStorageBoxKeyShareType, secretStorageBoxKeyShareMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"secret_storage_box_key_share\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"secret_storage_box_key_share\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into secret_storage_box_key_share")
	}

	if !cached {
		secretStorageBoxKeyShareInsertCacheMut.Lock()
		secretStorageBoxKeyShareInsertCache[key] = cache
		secretStorageBoxKeyShareInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the SecretStorageBoxKeyShare.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SecretStorageBoxKeyShare) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	key := makeCacheKey(columns, nil)
	secretStorageBoxKeyShareUpdateCacheMut.RLock()
	cache, cached := secretStorageBoxKeyShareUpdateCache[key]
	secretStorageBoxKeyShareUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			secretStorageBoxKeyShareAllColumns,
			secretStorageBoxKeySharePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update secret_storage_box_key_share, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"secret_storage_box_key_share\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, secretStorageBoxKeySharePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(secretStorageBoxKeyShareType, secretStorageBoxKeyShareMapping, append(wl, secretStorageBoxKeySharePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update secret_storage_box_key_share row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for secret_storage_box_key_share")
	}

	if !cached {
		secretStorageBoxKeyShareUpdateCacheMut.Lock()
		secretStorageBoxKeyShareUpdateCache[key] = cache
		secretStorageBoxKeyShareUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q secretStorageBoxKeyShareQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for secret_storage_box_key_share")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for secret_storage_box_key_share")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SecretStorageBoxKeyShareSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), secretStorageBoxKeySharePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"secret_storage_box_key_share\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, secretStorageBoxKeySharePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in secretStorageBoxKeyShare slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all secretStorageBoxKeyShare")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SecretStorageBoxKeyShare) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no secret_storage_box_key_share provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(secretStorageBoxKeyShareColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	secretStorageBoxKeyShareUpsertCacheMut.RLock()
	cache, cached := secretStorageBoxKeyShareUpsertCache[key]
	secretStorageBoxKeyShareUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			secretStorageBoxKeyShareAllColumns,
			secretStorageBoxKeyShareColumnsWithDefault,
			secretStorageBoxKeyShareColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			secretStorageBoxKeyShareAllColumns,
			secretStorageBoxKeySharePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert secret_storage_box_key_share, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(secretStorageBoxKeySharePrimaryKeyColumns))
			copy(conflict, secretStorageBoxKeySharePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"secret_storage_box_key_share\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(secretStorageBoxKeyShareType, secretStorageBoxKeyShareMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(secretStorageBoxKeyShareType, secretStorageBoxKeyShareMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert secret_storage_box_key_share")
	}

	if !cached {
		secretStorageBoxKeyShareUpsertCacheMut.Lock()
		secretStorageBoxKeyShareUpsertCache[key] = cache
		secretStorageBoxKeyShareUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single SecretStorageBoxKeyShare record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SecretStorageBoxKeyShare) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no SecretStorageBoxKeyShare provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), secretStorageBoxKeySharePrimaryKeyMapping)
	sql := "DELETE FROM \"secret_storage_box_key_share\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from secret_storage_box_key_share")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for secret_storage_box_key_share")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q secretStorageBoxKeyShareQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no secretStorageBoxKeyShareQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from secret_storage_box_key_share")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for secret_storage_box_key_share")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SecretStorageBoxKeyShareSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), secretStorageBoxKeySharePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"secret_storage_box_key_share\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, secretStorageBoxKeySharePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from secretStorageBoxKeyShare slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for secret_storage_box_key_share")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SecretStorageBoxKeyShare) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSecretStorageBoxKeyShare(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SecretStorageBoxKeyShareSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SecretStorageBoxKeyShareSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), secretStorageBoxKeySharePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"secret_storage_box_key_share\".* FROM \"secret_storage_box_key_share\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, secretStorageBoxKeySharePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in SecretStorageBoxKeyShareSlice")
	}

	*o = slice

	return nil
}

// SecretStorageBoxKeyShareExists checks if the SecretStorageBoxKeyShare row exists.
func SecretStorageBoxKeyShareExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"secret_storage_box_key_share\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if secret_storage_box_key_share exists")
	}

	return exists, nil
}
