// Code generated by SQLBoiler 4.2.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Identity is an object representing the database table.
type Identity struct {
	ID                  string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	AccountID           null.String `boil:"account_id" json:"account_id,omitempty" toml:"account_id" yaml:"account_id,omitempty"`
	DisplayName         string      `boil:"display_name" json:"display_name" toml:"display_name" yaml:"display_name"`
	Notifications       string      `boil:"notifications" json:"notifications" toml:"notifications" yaml:"notifications"`
	AvatarURL           null.String `boil:"avatar_url" json:"avatar_url,omitempty" toml:"avatar_url" yaml:"avatar_url,omitempty"`
	CreatedAt           time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	Color               null.String `boil:"color" json:"color,omitempty" toml:"color" yaml:"color,omitempty"`
	Level               int         `boil:"level" json:"level" toml:"level" yaml:"level"`
	Pubkey              null.String `boil:"pubkey" json:"pubkey,omitempty" toml:"pubkey" yaml:"pubkey,omitempty"`
	NonIdentifiedPubkey null.String `boil:"non_identified_pubkey" json:"non_identified_pubkey,omitempty" toml:"non_identified_pubkey" yaml:"non_identified_pubkey,omitempty"`
	IdentifierKind      string      `boil:"identifier_kind" json:"identifier_kind" toml:"identifier_kind" yaml:"identifier_kind"`
	IdentifierValue     string      `boil:"identifier_value" json:"identifier_value" toml:"identifier_value" yaml:"identifier_value"`
	MfaMethod           string      `boil:"mfa_method" json:"mfa_method" toml:"mfa_method" yaml:"mfa_method"`

	R *identityR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L identityL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IdentityColumns = struct {
	ID                  string
	AccountID           string
	DisplayName         string
	Notifications       string
	AvatarURL           string
	CreatedAt           string
	Color               string
	Level               string
	Pubkey              string
	NonIdentifiedPubkey string
	IdentifierKind      string
	IdentifierValue     string
	MfaMethod           string
}{
	ID:                  "id",
	AccountID:           "account_id",
	DisplayName:         "display_name",
	Notifications:       "notifications",
	AvatarURL:           "avatar_url",
	CreatedAt:           "created_at",
	Color:               "color",
	Level:               "level",
	Pubkey:              "pubkey",
	NonIdentifiedPubkey: "non_identified_pubkey",
	IdentifierKind:      "identifier_kind",
	IdentifierValue:     "identifier_value",
	MfaMethod:           "mfa_method",
}

// Generated where

var IdentityWhere = struct {
	ID                  whereHelperstring
	AccountID           whereHelpernull_String
	DisplayName         whereHelperstring
	Notifications       whereHelperstring
	AvatarURL           whereHelpernull_String
	CreatedAt           whereHelpertime_Time
	Color               whereHelpernull_String
	Level               whereHelperint
	Pubkey              whereHelpernull_String
	NonIdentifiedPubkey whereHelpernull_String
	IdentifierKind      whereHelperstring
	IdentifierValue     whereHelperstring
	MfaMethod           whereHelperstring
}{
	ID:                  whereHelperstring{field: "\"identity\".\"id\""},
	AccountID:           whereHelpernull_String{field: "\"identity\".\"account_id\""},
	DisplayName:         whereHelperstring{field: "\"identity\".\"display_name\""},
	Notifications:       whereHelperstring{field: "\"identity\".\"notifications\""},
	AvatarURL:           whereHelpernull_String{field: "\"identity\".\"avatar_url\""},
	CreatedAt:           whereHelpertime_Time{field: "\"identity\".\"created_at\""},
	Color:               whereHelpernull_String{field: "\"identity\".\"color\""},
	Level:               whereHelperint{field: "\"identity\".\"level\""},
	Pubkey:              whereHelpernull_String{field: "\"identity\".\"pubkey\""},
	NonIdentifiedPubkey: whereHelpernull_String{field: "\"identity\".\"non_identified_pubkey\""},
	IdentifierKind:      whereHelperstring{field: "\"identity\".\"identifier_kind\""},
	IdentifierValue:     whereHelperstring{field: "\"identity\".\"identifier_value\""},
	MfaMethod:           whereHelperstring{field: "\"identity\".\"mfa_method\""},
}

// IdentityRels is where relationship names are stored.
var IdentityRels = struct {
	Account                        string
	AuthenticationSteps            string
	SenderIdentityCryptoActions    string
	IdentityNotifications          string
	IdentityProfileSharingConsents string
	UsedCoupons                    string
}{
	Account:                        "Account",
	AuthenticationSteps:            "AuthenticationSteps",
	SenderIdentityCryptoActions:    "SenderIdentityCryptoActions",
	IdentityNotifications:          "IdentityNotifications",
	IdentityProfileSharingConsents: "IdentityProfileSharingConsents",
	UsedCoupons:                    "UsedCoupons",
}

// identityR is where relationships are stored.
type identityR struct {
	Account                        *Account                           `boil:"Account" json:"Account" toml:"Account" yaml:"Account"`
	AuthenticationSteps            AuthenticationStepSlice            `boil:"AuthenticationSteps" json:"AuthenticationSteps" toml:"AuthenticationSteps" yaml:"AuthenticationSteps"`
	SenderIdentityCryptoActions    CryptoActionSlice                  `boil:"SenderIdentityCryptoActions" json:"SenderIdentityCryptoActions" toml:"SenderIdentityCryptoActions" yaml:"SenderIdentityCryptoActions"`
	IdentityNotifications          IdentityNotificationSlice          `boil:"IdentityNotifications" json:"IdentityNotifications" toml:"IdentityNotifications" yaml:"IdentityNotifications"`
	IdentityProfileSharingConsents IdentityProfileSharingConsentSlice `boil:"IdentityProfileSharingConsents" json:"IdentityProfileSharingConsents" toml:"IdentityProfileSharingConsents" yaml:"IdentityProfileSharingConsents"`
	UsedCoupons                    UsedCouponSlice                    `boil:"UsedCoupons" json:"UsedCoupons" toml:"UsedCoupons" yaml:"UsedCoupons"`
}

// NewStruct creates a new relationship struct
func (*identityR) NewStruct() *identityR {
	return &identityR{}
}

// identityL is where Load methods for each relationship are stored.
type identityL struct{}

var (
	identityAllColumns            = []string{"id", "account_id", "display_name", "notifications", "avatar_url", "created_at", "color", "level", "pubkey", "non_identified_pubkey", "identifier_kind", "identifier_value", "mfa_method"}
	identityColumnsWithoutDefault = []string{"id", "account_id", "display_name", "avatar_url", "color", "pubkey", "non_identified_pubkey", "identifier_kind", "identifier_value"}
	identityColumnsWithDefault    = []string{"notifications", "created_at", "level", "mfa_method"}
	identityPrimaryKeyColumns     = []string{"id"}
)

type (
	// IdentitySlice is an alias for a slice of pointers to Identity.
	// This should generally be used opposed to []Identity.
	IdentitySlice []*Identity

	identityQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	identityType                 = reflect.TypeOf(&Identity{})
	identityMapping              = queries.MakeStructMapping(identityType)
	identityPrimaryKeyMapping, _ = queries.BindMapping(identityType, identityMapping, identityPrimaryKeyColumns)
	identityInsertCacheMut       sync.RWMutex
	identityInsertCache          = make(map[string]insertCache)
	identityUpdateCacheMut       sync.RWMutex
	identityUpdateCache          = make(map[string]updateCache)
	identityUpsertCacheMut       sync.RWMutex
	identityUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single identity record from the query.
func (q identityQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Identity, error) {
	o := &Identity{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for identity")
	}

	return o, nil
}

// All returns all Identity records from the query.
func (q identityQuery) All(ctx context.Context, exec boil.ContextExecutor) (IdentitySlice, error) {
	var o []*Identity

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Identity slice")
	}

	return o, nil
}

// Count returns the count of all Identity records in the query.
func (q identityQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count identity rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q identityQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if identity exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *Identity) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"account\"")

	return query
}

// AuthenticationSteps retrieves all the authentication_step's AuthenticationSteps with an executor.
func (o *Identity) AuthenticationSteps(mods ...qm.QueryMod) authenticationStepQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"authentication_step\".\"identity_id\"=?", o.ID),
	)

	query := AuthenticationSteps(queryMods...)
	queries.SetFrom(query.Query, "\"authentication_step\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"authentication_step\".*"})
	}

	return query
}

// SenderIdentityCryptoActions retrieves all the crypto_action's CryptoActions with an executor via sender_identity_id column.
func (o *Identity) SenderIdentityCryptoActions(mods ...qm.QueryMod) cryptoActionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"crypto_action\".\"sender_identity_id\"=?", o.ID),
	)

	query := CryptoActions(queryMods...)
	queries.SetFrom(query.Query, "\"crypto_action\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"crypto_action\".*"})
	}

	return query
}

// IdentityNotifications retrieves all the identity_notification's IdentityNotifications with an executor.
func (o *Identity) IdentityNotifications(mods ...qm.QueryMod) identityNotificationQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"identity_notification\".\"identity_id\"=?", o.ID),
	)

	query := IdentityNotifications(queryMods...)
	queries.SetFrom(query.Query, "\"identity_notification\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"identity_notification\".*"})
	}

	return query
}

// IdentityProfileSharingConsents retrieves all the identity_profile_sharing_consent's IdentityProfileSharingConsents with an executor.
func (o *Identity) IdentityProfileSharingConsents(mods ...qm.QueryMod) identityProfileSharingConsentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"identity_profile_sharing_consent\".\"identity_id\"=?", o.ID),
	)

	query := IdentityProfileSharingConsents(queryMods...)
	queries.SetFrom(query.Query, "\"identity_profile_sharing_consent\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"identity_profile_sharing_consent\".*"})
	}

	return query
}

// UsedCoupons retrieves all the used_coupon's UsedCoupons with an executor.
func (o *Identity) UsedCoupons(mods ...qm.QueryMod) usedCouponQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"used_coupon\".\"identity_id\"=?", o.ID),
	)

	query := UsedCoupons(queryMods...)
	queries.SetFrom(query.Query, "\"used_coupon\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"used_coupon\".*"})
	}

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (identityL) LoadAccount(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIdentity interface{}, mods queries.Applicator) error {
	var slice []*Identity
	var object *Identity

	if singular {
		object = maybeIdentity.(*Identity)
	} else {
		slice = *maybeIdentity.(*[]*Identity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &identityR{}
		}
		if !queries.IsNil(object.AccountID) {
			args = append(args, object.AccountID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &identityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.AccountID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.AccountID) {
				args = append(args, obj.AccountID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`account`),
		qm.WhereIn(`account.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for account")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for account")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.Identities = append(foreign.R.Identities, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.AccountID, foreign.ID) {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.Identities = append(foreign.R.Identities, local)
				break
			}
		}
	}

	return nil
}

// LoadAuthenticationSteps allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (identityL) LoadAuthenticationSteps(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIdentity interface{}, mods queries.Applicator) error {
	var slice []*Identity
	var object *Identity

	if singular {
		object = maybeIdentity.(*Identity)
	} else {
		slice = *maybeIdentity.(*[]*Identity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &identityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &identityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`authentication_step`),
		qm.WhereIn(`authentication_step.identity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load authentication_step")
	}

	var resultSlice []*AuthenticationStep
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice authentication_step")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on authentication_step")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for authentication_step")
	}

	if singular {
		object.R.AuthenticationSteps = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &authenticationStepR{}
			}
			foreign.R.Identity = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IdentityID {
				local.R.AuthenticationSteps = append(local.R.AuthenticationSteps, foreign)
				if foreign.R == nil {
					foreign.R = &authenticationStepR{}
				}
				foreign.R.Identity = local
				break
			}
		}
	}

	return nil
}

// LoadSenderIdentityCryptoActions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (identityL) LoadSenderIdentityCryptoActions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIdentity interface{}, mods queries.Applicator) error {
	var slice []*Identity
	var object *Identity

	if singular {
		object = maybeIdentity.(*Identity)
	} else {
		slice = *maybeIdentity.(*[]*Identity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &identityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &identityR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.ID) {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`crypto_action`),
		qm.WhereIn(`crypto_action.sender_identity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load crypto_action")
	}

	var resultSlice []*CryptoAction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice crypto_action")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on crypto_action")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for crypto_action")
	}

	if singular {
		object.R.SenderIdentityCryptoActions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cryptoActionR{}
			}
			foreign.R.SenderIdentity = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.SenderIdentityID) {
				local.R.SenderIdentityCryptoActions = append(local.R.SenderIdentityCryptoActions, foreign)
				if foreign.R == nil {
					foreign.R = &cryptoActionR{}
				}
				foreign.R.SenderIdentity = local
				break
			}
		}
	}

	return nil
}

// LoadIdentityNotifications allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (identityL) LoadIdentityNotifications(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIdentity interface{}, mods queries.Applicator) error {
	var slice []*Identity
	var object *Identity

	if singular {
		object = maybeIdentity.(*Identity)
	} else {
		slice = *maybeIdentity.(*[]*Identity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &identityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &identityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`identity_notification`),
		qm.WhereIn(`identity_notification.identity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load identity_notification")
	}

	var resultSlice []*IdentityNotification
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice identity_notification")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on identity_notification")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for identity_notification")
	}

	if singular {
		object.R.IdentityNotifications = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &identityNotificationR{}
			}
			foreign.R.Identity = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IdentityID {
				local.R.IdentityNotifications = append(local.R.IdentityNotifications, foreign)
				if foreign.R == nil {
					foreign.R = &identityNotificationR{}
				}
				foreign.R.Identity = local
				break
			}
		}
	}

	return nil
}

// LoadIdentityProfileSharingConsents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (identityL) LoadIdentityProfileSharingConsents(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIdentity interface{}, mods queries.Applicator) error {
	var slice []*Identity
	var object *Identity

	if singular {
		object = maybeIdentity.(*Identity)
	} else {
		slice = *maybeIdentity.(*[]*Identity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &identityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &identityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`identity_profile_sharing_consent`),
		qm.WhereIn(`identity_profile_sharing_consent.identity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load identity_profile_sharing_consent")
	}

	var resultSlice []*IdentityProfileSharingConsent
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice identity_profile_sharing_consent")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on identity_profile_sharing_consent")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for identity_profile_sharing_consent")
	}

	if singular {
		object.R.IdentityProfileSharingConsents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &identityProfileSharingConsentR{}
			}
			foreign.R.Identity = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IdentityID {
				local.R.IdentityProfileSharingConsents = append(local.R.IdentityProfileSharingConsents, foreign)
				if foreign.R == nil {
					foreign.R = &identityProfileSharingConsentR{}
				}
				foreign.R.Identity = local
				break
			}
		}
	}

	return nil
}

// LoadUsedCoupons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (identityL) LoadUsedCoupons(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIdentity interface{}, mods queries.Applicator) error {
	var slice []*Identity
	var object *Identity

	if singular {
		object = maybeIdentity.(*Identity)
	} else {
		slice = *maybeIdentity.(*[]*Identity)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &identityR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &identityR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`used_coupon`),
		qm.WhereIn(`used_coupon.identity_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load used_coupon")
	}

	var resultSlice []*UsedCoupon
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice used_coupon")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on used_coupon")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for used_coupon")
	}

	if singular {
		object.R.UsedCoupons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &usedCouponR{}
			}
			foreign.R.Identity = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.IdentityID {
				local.R.UsedCoupons = append(local.R.UsedCoupons, foreign)
				if foreign.R == nil {
					foreign.R = &usedCouponR{}
				}
				foreign.R.Identity = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the identity to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.Identities.
func (o *Identity) SetAccount(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"identity\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, identityPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.AccountID, related.ID)
	if o.R == nil {
		o.R = &identityR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			Identities: IdentitySlice{o},
		}
	} else {
		related.R.Identities = append(related.R.Identities, o)
	}

	return nil
}

// RemoveAccount relationship.
// Sets o.R.Account to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Identity) RemoveAccount(ctx context.Context, exec boil.ContextExecutor, related *Account) error {
	var err error

	queries.SetScanner(&o.AccountID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("account_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Account = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.Identities {
		if queries.Equal(o.AccountID, ri.AccountID) {
			continue
		}

		ln := len(related.R.Identities)
		if ln > 1 && i < ln-1 {
			related.R.Identities[i] = related.R.Identities[ln-1]
		}
		related.R.Identities = related.R.Identities[:ln-1]
		break
	}
	return nil
}

// AddAuthenticationSteps adds the given related objects to the existing relationships
// of the identity, optionally inserting them as new records.
// Appends related to o.R.AuthenticationSteps.
// Sets related.R.Identity appropriately.
func (o *Identity) AddAuthenticationSteps(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*AuthenticationStep) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IdentityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"authentication_step\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"identity_id"}),
				strmangle.WhereClause("\"", "\"", 2, authenticationStepPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IdentityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &identityR{
			AuthenticationSteps: related,
		}
	} else {
		o.R.AuthenticationSteps = append(o.R.AuthenticationSteps, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &authenticationStepR{
				Identity: o,
			}
		} else {
			rel.R.Identity = o
		}
	}
	return nil
}

// AddSenderIdentityCryptoActions adds the given related objects to the existing relationships
// of the identity, optionally inserting them as new records.
// Appends related to o.R.SenderIdentityCryptoActions.
// Sets related.R.SenderIdentity appropriately.
func (o *Identity) AddSenderIdentityCryptoActions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CryptoAction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.SenderIdentityID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"crypto_action\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"sender_identity_id"}),
				strmangle.WhereClause("\"", "\"", 2, cryptoActionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.SenderIdentityID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &identityR{
			SenderIdentityCryptoActions: related,
		}
	} else {
		o.R.SenderIdentityCryptoActions = append(o.R.SenderIdentityCryptoActions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cryptoActionR{
				SenderIdentity: o,
			}
		} else {
			rel.R.SenderIdentity = o
		}
	}
	return nil
}

// SetSenderIdentityCryptoActions removes all previously related items of the
// identity replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.SenderIdentity's SenderIdentityCryptoActions accordingly.
// Replaces o.R.SenderIdentityCryptoActions with related.
// Sets related.R.SenderIdentity's SenderIdentityCryptoActions accordingly.
func (o *Identity) SetSenderIdentityCryptoActions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CryptoAction) error {
	query := "update \"crypto_action\" set \"sender_identity_id\" = null where \"sender_identity_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.SenderIdentityCryptoActions {
			queries.SetScanner(&rel.SenderIdentityID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.SenderIdentity = nil
		}

		o.R.SenderIdentityCryptoActions = nil
	}
	return o.AddSenderIdentityCryptoActions(ctx, exec, insert, related...)
}

// RemoveSenderIdentityCryptoActions relationships from objects passed in.
// Removes related items from R.SenderIdentityCryptoActions (uses pointer comparison, removal does not keep order)
// Sets related.R.SenderIdentity.
func (o *Identity) RemoveSenderIdentityCryptoActions(ctx context.Context, exec boil.ContextExecutor, related ...*CryptoAction) error {
	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.SenderIdentityID, nil)
		if rel.R != nil {
			rel.R.SenderIdentity = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("sender_identity_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.SenderIdentityCryptoActions {
			if rel != ri {
				continue
			}

			ln := len(o.R.SenderIdentityCryptoActions)
			if ln > 1 && i < ln-1 {
				o.R.SenderIdentityCryptoActions[i] = o.R.SenderIdentityCryptoActions[ln-1]
			}
			o.R.SenderIdentityCryptoActions = o.R.SenderIdentityCryptoActions[:ln-1]
			break
		}
	}

	return nil
}

// AddIdentityNotifications adds the given related objects to the existing relationships
// of the identity, optionally inserting them as new records.
// Appends related to o.R.IdentityNotifications.
// Sets related.R.Identity appropriately.
func (o *Identity) AddIdentityNotifications(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IdentityNotification) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IdentityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"identity_notification\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"identity_id"}),
				strmangle.WhereClause("\"", "\"", 2, identityNotificationPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IdentityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &identityR{
			IdentityNotifications: related,
		}
	} else {
		o.R.IdentityNotifications = append(o.R.IdentityNotifications, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &identityNotificationR{
				Identity: o,
			}
		} else {
			rel.R.Identity = o
		}
	}
	return nil
}

// AddIdentityProfileSharingConsents adds the given related objects to the existing relationships
// of the identity, optionally inserting them as new records.
// Appends related to o.R.IdentityProfileSharingConsents.
// Sets related.R.Identity appropriately.
func (o *Identity) AddIdentityProfileSharingConsents(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*IdentityProfileSharingConsent) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IdentityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"identity_profile_sharing_consent\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"identity_id"}),
				strmangle.WhereClause("\"", "\"", 2, identityProfileSharingConsentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IdentityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &identityR{
			IdentityProfileSharingConsents: related,
		}
	} else {
		o.R.IdentityProfileSharingConsents = append(o.R.IdentityProfileSharingConsents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &identityProfileSharingConsentR{
				Identity: o,
			}
		} else {
			rel.R.Identity = o
		}
	}
	return nil
}

// AddUsedCoupons adds the given related objects to the existing relationships
// of the identity, optionally inserting them as new records.
// Appends related to o.R.UsedCoupons.
// Sets related.R.Identity appropriately.
func (o *Identity) AddUsedCoupons(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*UsedCoupon) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.IdentityID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"used_coupon\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"identity_id"}),
				strmangle.WhereClause("\"", "\"", 2, usedCouponPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.IdentityID = o.ID
		}
	}

	if o.R == nil {
		o.R = &identityR{
			UsedCoupons: related,
		}
	} else {
		o.R.UsedCoupons = append(o.R.UsedCoupons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &usedCouponR{
				Identity: o,
			}
		} else {
			rel.R.Identity = o
		}
	}
	return nil
}

// Identities retrieves all the records using an executor.
func Identities(mods ...qm.QueryMod) identityQuery {
	mods = append(mods, qm.From("\"identity\""))
	return identityQuery{NewQuery(mods...)}
}

// FindIdentity retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIdentity(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Identity, error) {
	identityObj := &Identity{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"identity\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, identityObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from identity")
	}

	return identityObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Identity) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no identity provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(identityColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	identityInsertCacheMut.RLock()
	cache, cached := identityInsertCache[key]
	identityInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			identityAllColumns,
			identityColumnsWithDefault,
			identityColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(identityType, identityMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(identityType, identityMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"identity\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"identity\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into identity")
	}

	if !cached {
		identityInsertCacheMut.Lock()
		identityInsertCache[key] = cache
		identityInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the Identity.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Identity) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	identityUpdateCacheMut.RLock()
	cache, cached := identityUpdateCache[key]
	identityUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			identityAllColumns,
			identityPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update identity, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"identity\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, identityPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(identityType, identityMapping, append(wl, identityPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update identity row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for identity")
	}

	if !cached {
		identityUpdateCacheMut.Lock()
		identityUpdateCache[key] = cache
		identityUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q identityQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for identity")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for identity")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IdentitySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), identityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"identity\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, identityPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in identity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all identity")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Identity) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no identity provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(identityColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	identityUpsertCacheMut.RLock()
	cache, cached := identityUpsertCache[key]
	identityUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			identityAllColumns,
			identityColumnsWithDefault,
			identityColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			identityAllColumns,
			identityPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert identity, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(identityPrimaryKeyColumns))
			copy(conflict, identityPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"identity\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(identityType, identityMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(identityType, identityMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert identity")
	}

	if !cached {
		identityUpsertCacheMut.Lock()
		identityUpsertCache[key] = cache
		identityUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single Identity record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Identity) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Identity provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), identityPrimaryKeyMapping)
	sql := "DELETE FROM \"identity\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from identity")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for identity")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q identityQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no identityQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from identity")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for identity")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IdentitySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), identityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"identity\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, identityPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from identity slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for identity")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Identity) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIdentity(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IdentitySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IdentitySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), identityPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"identity\".* FROM \"identity\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, identityPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in IdentitySlice")
	}

	*o = slice

	return nil
}

// IdentityExists checks if the Identity row exists.
func IdentityExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"identity\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if identity exists")
	}

	return exists, nil
}
